/*
 *
 *   Copyright (c) 2018, WSO2 Inc., WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 * /
 */

package org.wso2.security.tools.scanner.dependency.js.postprocessor;

import org.apache.log4j.Logger;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.wso2.security.tools.scanner.dependency.js.constants.JSScannerConstants;
import org.wso2.security.tools.scanner.dependency.js.exception.ConfigParserException;
import org.wso2.security.tools.scanner.dependency.js.exception.FileHandlerException;
import org.wso2.security.tools.scanner.dependency.js.exception.TicketCreatorException;
import org.wso2.security.tools.scanner.dependency.js.ticketcreator.TicketCreator;
import org.wso2.security.tools.scanner.dependency.js.reportpublisher.ReportUploader;
import org.wso2.security.tools.scanner.dependency.js.utils.CommonUtils;
import org.wso2.security.tools.scanner.dependency.js.utils.ConfigParser;

import java.util.Arrays;
import java.util.HashMap;


/**
 * Class to handle publishing scan report in multiple ways.
 */
public class VulnerabilityReportManager {
    private static final Logger log = Logger.getLogger(VulnerabilityReportManager.class);

    public VulnerabilityReportManager() {
    }

    /**
     * This method handle all ways to publish the output.
     *
     * @param productResponseMapper mapper for product and scan result.
     */
    public void controlReportManager(HashMap<String, String> productResponseMapper) {
        //Instance to upload scan report to github repo
        log.info("[JS_SEC_DAILY_SCAN]  " + "Start uploading report to git repo.");
        ReportUploader reportUploader = null;
        TicketCreator TicketCreator = null;
        try {
            reportUploader = ConfigParser.parseGitUploaderConfigProperties();
        } catch (GitAPIException e) {
            log.error("Upload scan reports to git repository failed. " +
                    "Unable to clone or pull Security Artifact repository", e);
        } catch (ConfigParserException e) {
            log.error("Upload scan reports to git repository failed. Error occurred while reading " +
                    "git configuration files", e);
        } catch (FileHandlerException e) {
            log.error(e);
        }

        if (reportUploader != null) {
            try {
                reportUploader.publishReport(productResponseMapper);
                log.info("[JS_SEC_DAILY_SCAN]  " + "Successfully upoloaded reports to git repo.");
                log.info("[JS_SEC_DAILY_SCAN]  " + "Start creating JIRA tickets.");
                //Create ticket for scan report
                TicketCreator = ConfigParser.parseTicketCreatorCredentials();
                TicketCreator.handleTicketCreatorAPICall(productResponseMapper, reportUploader.getReportFileMapper());
                log.info("[JS_SEC_DAILY_SCAN]  " + "JIRA Tickets are created successfully..");
            } catch (GitAPIException | FileHandlerException e) {
                log.error("Upload scan reports to git repository failed.", e);
            } catch (ConfigParserException e) {
                log.error("Failed to create JIRA ticket.", e);
            } catch (TicketCreatorException e) {
                log.error("Failed to create JIRA Ticket.", e);
            } finally {
                if (TicketCreator != null) {
                    // Username and password are filled with random numbers. This is used to discard the char array elements
                    // of username and password from memory dump and refill with random numbers.
                    CommonUtils.clearCredentialData(TicketCreator.getUsername(),TicketCreator.getPassword());
                }
            }
        }
    }

}
